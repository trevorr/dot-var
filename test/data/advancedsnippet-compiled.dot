Advanced templating: illustrates defines and includes.

Include external snippet defined in a variable:
undefined

Load external template from a file:
<!-- evaluation error: def.loadfile('/snippet.txt') -->

Load external template from a file and cache in a variable:
<!-- evaluation error: def['snippet.txt'] || (def['snippet.txt'] = def.loadfile('/snippet.txt')) -->

Use cached file again:
undefined

Here is a def block that will be used later. This snippet can be referenced from external templates too:


First use of snippet1:

	Some snippet that will be included undefined later {{=it.f1}}


Second use of snippet1:

	Some snippet that will be included undefined later {{=it.f1}}


Include snippet1 if true:

	Some snippet that will be included undefined later {{=it.f1}}


Runtime and Compile time evaluation used together:
{{= it.f3 + NaN }}

Include xyz or insert 'not found':
1

Set xyz to 1 and exclude result from output:
 is identical to 

Compare xyz to 1, show 'xyz is not 1' if false:
xyz is not 1

{{ if (true) { }}
	undefined is falsy
{{ } }}

{{ if (false) { }}
	if(true) block
{{ } }}



<!-- evaluation error: def.fntest() -->

Conditionals:
{{? !it.altEmail }}
	<p>
	second email: {{= it.altEmail }}
	</p>
{{?? true }}
	else case worked
{{?}}

Array iterators
{{~ it.farray :p }}
	<h1>{{=p.farray}}<h1>
	{{~ p.farray :value:i }}
		<h2>{{=i}}: {{=value}}</h2>
		{{~ value :w }}
			<h3>{{=w}}</h3>
		{{~}}
	{{~}}
{{~}}

{{~ ["apple", "banana", "orange"] :k}}
	{{=k}}
{{~}}

{{~ (function(){ return [1,2,3]})() :k}}
	{{=k}}
{{~}}

{{ function children(it) { }}

{{?it.Nodes.length}}
<ul>
    {{~ it.Nodes :p}}
    <li>
        {{=p.title}}
		{{children(p);}}
    </li>
    {{~}}
</ul>
{{?}}

{{ } }}

{{ children( {Nodes:[ {title:"1.1", Nodes:[ {title:"1.1.1", Nodes:[]}, {title:"1.1.2", Nodes:[]}] }, { title:"1.2", Nodes:[]}, { title:"1.3", Nodes:[]}], title:"1" } ); }}








	<div>{{='text'}}</div>

	<div>{{=5}}</div>



	<div>{{=it.f3}}</div>



	<div>{{="lala tralala"}}</div>



	<div>{{={a:1, b:2}.a}}</div>





<!-- evaluation error: def.testFunctionWithParam(def.mytestparam) -->

<!-- evaluation error: def.testFunctionWithParam("\{\{=it.name\}\}") -->




My name is: {{=it.name}}


The end